{"version":3,"sources":["components/Post/index.js","components/Editcomponent/index.js","components/Allpost/index.js","components/Postform/index.js","App.js","Reducers/postReducer.js","index.js"],"names":["Post","props","dispatch","useDispatch","post","postTitle","postContent","onClick","type","id","Editcomponent","title","useRef","onSubmit","event","preventDefault","data","newTitle","current","value","newContent","required","ref","defaultValue","typeof","Allpost","posts","useSelector","state","map","key","editing","Postform","className","Date","placeholder","rows","cols","App","postReducer","action","concat","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea9241cf.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useDispatch} from 'react-redux'\r\n\r\nfunction Post(props){\r\n  const dispatch = useDispatch()\r\n  \r\n  \r\n  return(\r\n    <div>\r\n      <h2>{props.post.postTitle}</h2>\r\n      <p>{props.post.postContent}</p>\r\n      <button onClick = {() => dispatch({type: \"EDIT_POST\", id: props.post.id})}>Edit</button>\r\n      <button onClick={() => dispatch({type: \"DELETE_POST\", id: props.post.id})}>Delete</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React, {useRef} from 'react';\r\nimport {useDispatch} from 'react-redux'\r\n\r\nfunction Editcomponent(props) {\r\n  const dispatch = useDispatch()\r\n  const title = useRef()\r\n  const post = useRef()\r\n\r\n  function handleEdit(event){\r\n    event.preventDefault();\r\n    const newTitle = title.current.value\r\n    const newContent = post.current.value\r\n    const data = {\r\n      newTitle,\r\n      newContent\r\n    }\r\n    dispatch({type: 'UPDATE_POST', id: props.post.id, data: data})\r\n  }\r\n  \r\n  return(\r\n    <div>\r\n      <form onSubmit={handleEdit}>\r\n        <input required type=\"text\" ref={title} defaultValue={props.post.postTitle} ></input>\r\n        <textarea required typeof=\"text\" ref={post} defaultValue={props.post.postContent}></textarea>\r\n        <button>Update</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Editcomponent","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport Post from '../Post'\r\nimport Editcomponent from '../Editcomponent'\r\n\r\nfunction Allpost(){\r\n\r\n  const posts = useSelector( state => ({\r\n    posts: state\r\n  }))\r\n\r\n  return(\r\n    <div>\r\n      <h1>All Posts</h1>\r\n      {posts.posts.map(post => \r\n        <div key={post.id}>\r\n          { post.editing ? <Editcomponent post={post} key={post.id} /> :\r\n          <Post key={post.id} post={post}/>}\r\n        </div>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Allpost","import React, {useRef} from 'react';\r\nimport {useDispatch} from 'react-redux'\r\n\r\nfunction Postform(){\r\n  const dispatch = useDispatch()\r\n  const title = useRef()\r\n  const post = useRef()\r\n\r\n  function handleFormSubmit(event){\r\n    event.preventDefault();\r\n    const postTitle = title.current.value\r\n    const postContent = post.current.value\r\n    const data = {\r\n      id: new Date(),\r\n      postTitle,\r\n      postContent,\r\n      editing: false\r\n    }\r\n    dispatch({type: 'ADD_POST', data})\r\n    title.current.value =\"\"\r\n    post.current.value = \"\"\r\n  }\r\n  \r\n  return(\r\n    <div className=\"Postform\">\r\n      <h1>Create Post</h1>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <input required type=\"text\" placeholder=\"Enter Post Title\" ref={title} />\r\n        <br /> <br />\r\n        <textarea required rows=\"5\" cols=\"28\" placeholder=\"Enter Post\" ref={post}/>\r\n        <br /><br />\r\n        <button>Post</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Postform;","import React from 'react';\nimport Allpost from './components/Allpost'\nimport Postform from './components/Postform'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Postform />\n      <Allpost />\n    </div>\n  );\n}\n\nexport default App;\n","const postReducer =(state = [], action) =>{\r\n  switch(action.type) {\r\n    case 'ADD_POST':\r\n      return state.concat([action.data])\r\n    case 'DELETE_POST':\r\n      return state.filter((post) => post.id !== action.id)\r\n    case 'EDIT_POST':\r\n      return state.map((post)=>post.id === action.id ? {...post,editing:!post.editing}:post)\r\n    case 'UPDATE_POST':\r\n      return state.map(post => {\r\n        if(post.id === action.id){\r\n          return {\r\n            ...post,\r\n            postTitle: action.data.newTitle,\r\n            postContent: action.data.newContent,\r\n            editing: !post.editing \r\n          }\r\n        }\r\n        return post\r\n      })\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default postReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {createStore} from 'redux'\nimport postReducer from './Reducers/postReducer'\nimport {Provider} from 'react-redux'\n\nconst store = createStore(postReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}